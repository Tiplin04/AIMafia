// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

const GeminiApi = require('./GeminiApi');

// –ö–ª–∞—Å—Å –¥–ª—è Cohere API
class CohereProvider {
  constructor(apiKey) {
    this.apiKey = apiKey;
  }
  
  async sendMessage(message) {
    const response = await fetch('https://api.cohere.ai/v1/generate', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'command',
        prompt: message,
        max_tokens: 150,
        temperature: 0.7,
        k: 0,
        stop_sequences: [],
        return_likelihoods: 'NONE'
      })
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data = await response.json();
    return {
      text: data.generations[0].text.trim(),
      usage: data.meta
    };
  }
}

class MultiAIProvider {
  constructor() {
    this.providers = [];
    this.currentProviderIndex = 0;
    this.initializeProviders();
  }

  initializeProviders() {
    // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const geminiKeys = [
      process.env.GEMINI_API_KEY_1,
      process.env.GEMINI_API_KEY_2,
      process.env.GEMINI_API_KEY_3
    ].filter(key => key && key !== 'your_gemini_key_1_here');

    const cohereKeys = [
      process.env.COHERE_API_KEY_1,
      process.env.COHERE_API_KEY_2,
      process.env.COHERE_API_KEY_3
    ].filter(key => key && key !== 'your_cohere_key_1_here');

    // –î–æ–±–∞–≤–ª—è–µ–º Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    geminiKeys.forEach((key, index) => {
      if (key) {
        this.providers.push({
          name: `gemini-${index + 1}`,
          api: new GeminiApi({
            apiKey: key,
            log: false
          }),
          enabled: true,
          errorCount: 0,
          maxErrors: 3
        });
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º Cohere –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    cohereKeys.forEach((key, index) => {
      if (key) {
        this.providers.push({
          name: `cohere-${index + 1}`,
          api: new CohereProvider(key),
          enabled: true,
          errorCount: 0,
          maxErrors: 3
        });
      }
    });

    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞, –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if (this.providers.length === 0) {
      console.warn('‚ö†Ô∏è  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å API –∫–ª—é—á–∞–º–∏.');
      console.warn('üìù –°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏–º–∏ –∫–ª—é—á–∞–º–∏.');
    } else {
      console.log(`‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${this.providers.length} AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤`);
    }
  }

  async sendMessage(message) {
    let lastError = null;
    
    // –ü—Ä–æ–±—É–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    for (let i = 0; i < this.providers.length; i++) {
      const provider = this.providers[i];
      if (!provider.enabled) continue;
      
      try {
        console.log(`[AI] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${provider.name}`);
        const result = await provider.api.sendMessage(message);
        provider.errorCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        return result;
      } catch (error) {
        console.error(`[AI] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${provider.name}:`, error.message);
        lastError = error;
        provider.errorCount++;
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø—Ä–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö
        if (provider.errorCount >= provider.maxErrors) {
          console.log(`[AI] –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä ${provider.name} –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫`);
          provider.enabled = false;
        }
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback
    console.log('[AI] –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
    throw lastError || new Error('No AI providers available');
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  addProvider(name, api, maxErrors = 3) {
    this.providers.push({
      name,
      api,
      enabled: true,
      errorCount: 0,
      maxErrors
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  setProviderStatus(name, enabled) {
    const provider = this.providers.find(p => p.name === name);
    if (provider) {
      provider.enabled = enabled;
      if (enabled) {
        provider.errorCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
      }
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
  getProviderStats() {
    return this.providers.map(p => ({
      name: p.name,
      enabled: p.enabled,
      errorCount: p.errorCount,
      maxErrors: p.maxErrors
    }));
  }
}

class BotManager {
  constructor() {
    this.bots = new Map(); // Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–æ—Ç–æ–≤
    this.botNames = [
      '–û–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ú–∞—Ä—ñ—è', '–î–º–∏—Ç—Ä–æ', '–ê–Ω–Ω–∞', '–°–µ—Ä–≥—ñ–π', '–û–ª–µ–Ω–∞', 
      '–ú–∏—Ö–∞–π–ª–æ', '–û–ª—å–≥–∞', '–ê–Ω–¥—Ä—ñ–π', '–ù–∞—Ç–∞–ª—ñ—è', '–Ü–≥–æ—Ä', '–¢–µ—Ç—è–Ω–∞',
      '–í–æ–ª–æ–¥–∏–º–∏—Ä', '–°–≤—ñ—Ç–ª–∞–Ω–∞', '–ü–∞–≤–ª–æ', '–Æ–ª—ñ—è', '–ú–∏–∫–æ–ª–∞', '–Ü—Ä–∏–Ω–∞'
    ];
    this.usedNames = new Set();
    this.aiProvider = new MultiAIProvider();
    
    // –°–∏—Å—Ç–µ–º–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ - "—Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ"
    this.dayHistory = []; // –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    this.currentDaySpeakerIndex = 0; // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤—ã—Å—Ç—É–ø–∞—é—â–µ–≥–æ –≤ –¥–Ω–µ
    this.nightResults = null; // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ—á–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –±–æ—Ç–∞–º
  }

  // –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –¥–Ω—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è)
  resetDayHistory() {
    this.dayHistory = [];
    this.currentDaySpeakerIndex = 0;
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–Ω—è
  addDayMessage(speakerName, message) {
    this.dayHistory.push({
      speaker: speakerName,
      message: message,
      timestamp: Date.now()
    });
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–æ—á–∏
  setNightResults(results) {
    this.nightResults = results;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
  getOptimizedHistoryForBot(speakerIndex) {
    if (speakerIndex === 0) {
      // –ü–µ—Ä–≤—ã–π –≤—ã—Å—Ç—É–ø–∞—é—â–∏–π –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ—á–∏
      return [];
    } else {
      // –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∏–¥—è—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ—á–∏ + —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤—ã—Å—Ç—É–ø–∞—é—â–∏—Ö
      return this.dayHistory.slice(0, speakerIndex);
    }
  }

  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–æ—á–∏
  getBasePromptWithNightResults(bot, players) {
    const alivePlayers = players.filter(p => p.alive);
    let prompt = `
–¢–∏ –≥—Ä–∞—î—à —É –≥—Ä—É "–ú–∞—Ñ—ñ—è". –¢–≤–æ—è —Ä–æ–ª—å: ${this.getRoleText(bot.role)}.
–¢–≤–æ—è –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å: ${bot.personality.description}.
–¢–≤–æ—î —ñ–º'—è: ${bot.name}.

–ñ–∏–≤—ñ –≥—Ä–∞–≤—Ü—ñ: ${alivePlayers.map(p => p.name).join(', ')}
–¢–≤–æ—è –ø–∞–º'—è—Ç—å: ${JSON.stringify(bot.memory)}`;

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ—á–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (this.nightResults) {
      prompt += `\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–æ—á—ñ:\n${this.nightResults}`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –¥–µ—Ç–µ–∫—Ç–∏–≤–∞
      if (bot.role === 'detective' && bot.memory.detectiveResults.length > 0) {
        const lastCheck = bot.memory.detectiveResults[bot.memory.detectiveResults.length - 1];
        prompt += `\n\n–¢–≤–æ—è –æ—Å—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: ${lastCheck.target} - ${lastCheck.role}`;
      }
    }

    return prompt;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
  createBot() {
    const availableNames = this.botNames.filter(name => !this.usedNames.has(name));
    if (availableNames.length === 0) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–º–µ–Ω –¥–ª—è –±–æ—Ç–æ–≤');
    }
    
    const randomName = availableNames[Math.floor(Math.random() * availableNames.length)];
    this.usedNames.add(randomName);
    
    const bot = {
      id: `bot_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      name: randomName,
      isBot: true,
      alive: true,
      role: null,
      memory: {
        detectiveResults: [], // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫–æ–º–∏—Å—Å–∞—Ä–∞
        suspicions: [], // –ü–æ–¥–æ–∑—Ä–µ–Ω–∏—è
        gameHistory: [], // –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä—ã
        mafiaPartner: null, // –ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ –º–∞—Ñ–∏–∏ (–µ—Å–ª–∏ –±–æ—Ç –º–∞—Ñ–∏—è)
        lastActions: [] // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
      },
      personality: this.generatePersonality()
    };
    
    this.bots.set(bot.id, bot);
    return bot;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
  generatePersonality() {
    const personalities = [
      { type: 'aggressive', description: '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∏ –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–π' },
      { type: 'cautious', description: '–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–Ω—ã–π' },
      { type: 'social', description: '–æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π' },
      { type: 'mysterious', description: '–∑–∞–≥–∞–¥–æ—á–Ω—ã–π –∏ –º–æ–ª—á–∞–ª–∏–≤—ã–π' },
      { type: 'logical', description: '–ª–æ–≥–∏—á–Ω—ã–π –∏ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π' }
    ];
    
    return personalities[Math.floor(Math.random() * personalities.length)];
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞
  removeBot(botId) {
    const bot = this.bots.get(botId);
    if (bot) {
      this.usedNames.delete(bot.name);
      this.bots.delete(botId);
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
  clearBots() {
    this.bots.clear();
    this.usedNames.clear();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ—Ç–∞ –ø–æ ID
  getBot(botId) {
    return this.bots.get(botId);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
  getAllBots() {
    return Array.from(this.bots.values());
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∂–∏–≤—ã—Ö –±–æ—Ç–æ–≤
  getAliveBots() {
    return Array.from(this.bots.values()).filter(bot => bot.alive);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ—Ç–æ–≤ –ø–æ —Ä–æ–ª–∏
  getBotsByRole(role) {
    return Array.from(this.bots.values()).filter(bot => bot.role === role && bot.alive);
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –±–æ—Ç–∞
  async generateBotGreeting(bot, players) {
    const prompt = `
–¢–∏ –≥—Ä–∞—î—à —É –≥—Ä—É "–ú–∞—Ñ—ñ—è". –¢–≤–æ—è —Ä–æ–ª—å: ${this.getRoleText(bot.role)}.
–¢–≤–æ—è –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å: ${bot.personality.description}.
–¢–≤–æ—î —ñ–º'—è: ${bot.name}.

–Ü–Ω—à—ñ –≥—Ä–∞–≤—Ü—ñ: ${players.map(p => p.name).join(', ')}.

–ó–≥–µ–Ω–µ—Ä—É–π –∫–æ—Ä–æ—Ç–∫–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è (1-2 —Ä–µ—á–µ–Ω–Ω—è) –≤—ñ–¥ —Å–≤–æ–≥–æ —ñ–º–µ–Ω—ñ. –ë—É–¥—å –ø—Ä–∏—Ä–æ–¥–Ω–∏–º, –Ω–µ —Ä–æ–∑–∫—Ä–∏–≤–∞–π —Å–≤–æ—é —Ä–æ–ª—å, –∞–ª–µ –ø–æ–∫–∞–∂–∏ —Å–≤—ñ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è, –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.`;

    try {
      const response = await this.aiProvider.sendMessage(prompt);
      return response.text || this.generateSmartFallback(bot, { players }, 'greeting');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è:', error);
      return this.generateSmartFallback(bot, { players }, 'greeting');
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ—á–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –±–æ—Ç–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  async generateNightAction(bot, players, nightActions) {
    const alivePlayers = players.filter(p => p.alive && p.name !== bot.name);
    const targetOptions = alivePlayers.map(p => p.name).join(', ');
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–æ—á–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    let prompt = this.getBasePromptWithNightResults(bot, players);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    prompt += `
–ñ–∏–≤—ñ –≥—Ä–∞–≤—Ü—ñ –¥–ª—è –≤–∏–±–æ—Ä—É: ${targetOptions}
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
`;

    if (bot.role === 'mafia') {
      const mafiaPartners = this.getBotsByRole('mafia').filter(b => b.id !== bot.id);
      const mafiaNames = mafiaPartners.map(b => b.name).join(', ');
      
      prompt += `
–¢–∏ –º–∞—Ñ—ñ—è. –¢–≤–æ—ó –ø–∞—Ä—Ç–Ω–µ—Ä–∏ –ø–æ –º–∞—Ñ—ñ—ó: ${mafiaNames || '–Ω–µ–º–∞—î'}
–ü–æ—Ç–æ—á–Ω—ñ –≥–æ–ª–æ—Å–∏ –º–∞—Ñ—ñ—ó: ${JSON.stringify(nightActions.mafia)}
–û–±–µ—Ä–∏ –æ–¥–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è –¥–ª—è –≤–±–∏–≤—Å—Ç–≤–∞. –í—Ä–∞—Ö–æ–≤—É–π –≥–æ–ª–æ—Å–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ —ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ç—ñ–ª—å–∫–∏ —ñ–º–µ–Ω–µ–º –æ–±—Ä–∞–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è, –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.`;
    } else if (bot.role === 'doctor') {
      prompt += `
–¢–∏ –ª—ñ–∫–∞—Ä. –û–±–µ—Ä–∏ –æ–¥–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è –¥–ª—è –ª—ñ–∫—É–≤–∞–Ω–Ω—è.
–ê–Ω–∞–ª—ñ–∑—É–π, —Ö—Ç–æ –º–æ–∂–µ –±—É—Ç–∏ —Ü—ñ–ª–ª—é –º–∞—Ñ—ñ—ó —Ü—ñ—î—ó –Ω–æ—á—ñ.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ç—ñ–ª—å–∫–∏ —ñ–º–µ–Ω–µ–º –æ–±—Ä–∞–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è, –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.`;
    } else if (bot.role === 'detective') {
      prompt += `
–¢–∏ –∫–æ–º—ñ—Å–∞—Ä. –û–±–µ—Ä–∏ –æ–¥–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–ª—ñ.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å–≤–æ—é –ø–∞–º'—è—Ç—å –ø—Ä–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ç—ñ–ª—å–∫–∏ —ñ–º–µ–Ω–µ–º –æ–±—Ä–∞–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è, –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.`;
    }

    try {
      const response = await this.aiProvider.sendMessage(prompt);
      const target = response.text?.trim();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (target && alivePlayers.some(p => p.name === target)) {
        return target;
      }
      
      // –ï—Å–ª–∏ AI –≤—ã–±—Ä–∞–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π fallback
      return this.generateSmartFallback(bot, { players }, 'night_action');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –Ω—ñ—á–Ω–æ—ó –¥—ñ—ó:', error);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π fallback –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return this.generateSmartFallback(bot, { players }, 'night_action');
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è –¥–ª—è –±–æ—Ç–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  async generateDaySpeech(bot, players, speakerIndex = 0) {
    const alivePlayers = players.filter(p => p.alive);
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–æ—á–∏
    let prompt = this.getBasePromptWithNightResults(bot, players);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–Ω—è (—Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
    const dayHistory = this.getOptimizedHistoryForBot(speakerIndex);
    if (dayHistory.length > 0) {
      prompt += `\n\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ü—å–æ–≥–æ –¥–Ω—è:\n`;
      dayHistory.forEach((msg, index) => {
        prompt += `${index + 1}. ${msg.speaker}: ${msg.message}\n`;
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–µ—á–∏
    prompt += `
–í–∏—Å–ª–æ–≤–∏ —Å–≤–æ—ó –ø—ñ–¥–æ–∑—Ä–∏ —ñ –¥—É–º–∫–∏ –ø—Ä–æ —Ç–µ, —Ö—Ç–æ –º–æ–∂–µ –±—É—Ç–∏ –º–∞—Ñ—ñ—î—é.
–ë—É–¥—å –ø—Ä–∏—Ä–æ–¥–Ω–∏–º, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å–≤–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å.
–ù–µ —Ä–æ–∑–∫—Ä–∏–≤–∞–π —Å–≤–æ—é —Ä–æ–ª—å, —è–∫—â–æ —Ç–∏ –∫–æ–º—ñ—Å–∞—Ä –∞–±–æ –ª—ñ–∫–∞—Ä.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ (2-3 —Ä–µ—á–µ–Ω–Ω—è).
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.`;

    try {
      const response = await this.aiProvider.sendMessage(prompt);
      return response.text || this.generateSmartFallback(bot, { players }, 'speech');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–µ–Ω–Ω–æ—ó –ø—Ä–æ–º–æ–≤–∏:', error);
      return this.generateSmartFallback(bot, { players }, 'speech');
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞ –¥–ª—è –±–æ—Ç–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  async generateDayVote(bot, players, dayVotes) {
    const alivePlayers = players.filter(p => p.alive && p.name !== bot.name);
    const targetOptions = alivePlayers.map(p => p.name).join(', ');
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–æ—á–∏
    let prompt = this.getBasePromptWithNightResults(bot, players);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–Ω—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–±–æ—Ç –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –≤—Å–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è)
    if (this.dayHistory.length > 0) {
      prompt += `\n\n–í—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ü—å–æ–≥–æ –¥–Ω—è:\n`;
      this.dayHistory.forEach((msg, index) => {
        prompt += `${index + 1}. ${msg.speaker}: ${msg.message}\n`;
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    prompt += `
–ñ–∏–≤—ñ –≥—Ä–∞–≤—Ü—ñ –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è: ${targetOptions}
–ü–æ—Ç–æ—á–Ω—ñ –≥–æ–ª–æ—Å–∏: ${JSON.stringify(dayVotes)}
–ó–∞ –∫–æ–≥–æ —Ç–∏ –≥–æ–ª–æ—Å—É—î—à? –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–æ—Å—Ç–∞—Ç–Ω—ñ—Ö –ø—ñ–¥—Å—Ç–∞–≤, –º–æ–∂–µ—à –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ç—ñ–ª—å–∫–∏ —ñ–º–µ–Ω–µ–º –≥—Ä–∞–≤—Ü—è –∞–±–æ —Å–ª–æ–≤–æ–º "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.`;

    try {
      const response = await this.aiProvider.sendMessage(prompt);
      const vote = response.text?.trim().toLowerCase();
      
      if (vote === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏' || vote === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏') {
        return null;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (vote && alivePlayers.some(p => p.name.toLowerCase() === vote)) {
        const targetPlayer = alivePlayers.find(p => p.name.toLowerCase() === vote);
        return targetPlayer.name;
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π fallback –µ—Å–ª–∏ –≤—ã–±–æ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
      return this.generateSmartFallback(bot, { players }, 'vote');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–µ–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å—É:', error);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π fallback –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return this.generateSmartFallback(bot, { players }, 'vote');
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞
  updateBotMemory(botId, event) {
    const bot = this.bots.get(botId);
    if (!bot) return;

    bot.memory.gameHistory.push({
      timestamp: Date.now(),
      event: event
    });

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 20 —Å–æ–±—ã—Ç–∏—è–º–∏
    if (bot.memory.gameHistory.length > 20) {
      bot.memory.gameHistory = bot.memory.gameHistory.slice(-20);
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∏—Å—Å–∞—Ä–∞
  addDetectiveResult(botId, targetName, targetRole) {
    const bot = this.bots.get(botId);
    if (!bot || bot.role !== 'detective') return;

    bot.memory.detectiveResults.push({
      target: targetName,
      role: targetRole,
      timestamp: Date.now()
    });
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è
  addSuspicion(botId, targetName, reason) {
    const bot = this.bots.get(botId);
    if (!bot) return;

    bot.memory.suspicions.push({
      target: targetName,
      reason: reason,
      timestamp: Date.now()
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–æ–ª–∏
  getRoleText(role) {
    switch (role) {
      case 'mafia': return '–º–∞—Ñ–∏—è';
      case 'doctor': return '–¥–æ–∫—Ç–æ—Ä';
      case 'detective': return '–∫–æ–º–∏—Å—Å–∞—Ä';
      case 'citizen': return '–º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å';
      default: return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
  getRandomGreeting(botName) {
    const greetings = [
      `–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –Ø ${botName}, –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ!`,
      `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç ${botName}.`,
      `–ü—Ä–∏–≤–µ—Ç! ${botName} –Ω–∞ —Å–≤—è–∑–∏.`,
      `–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø ${botName}.`,
      `–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! ${botName} –∑–¥–µ—Å—å.`
    ];
    return greetings[Math.floor(Math.random() * greetings.length)];
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –¥–Ω–µ–≤–Ω–æ–π —Ä–µ—á–∏
  getRandomDaySpeech(botName) {
    const speeches = [
      `–Ø ${botName}, –∏ —è –¥—É–º–∞—é, —á—Ç–æ –Ω—É–∂–Ω–æ –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º –≤ —Å–≤–æ–∏—Ö –≤—ã–≤–æ–¥–∞—Ö.`,
      `${botName} –∑–¥–µ—Å—å. –ù—É–∂–Ω–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤.`,
      `–ö–∞–∫ ${botName}, —è —Å—á–∏—Ç–∞—é, —á—Ç–æ –≤–∞–∂–Ω–æ —Å–ª—É—à–∞—Ç—å –≤—Å–µ—Ö –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ.`,
      `${botName} –≥–æ–≤–æ—Ä–∏—Ç: –¥–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏ —Å–ø–æ–∫–æ–π–Ω–æ.`,
      `–Ø ${botName}. –ü–æ–∫–∞ —á—Ç–æ —É –º–µ–Ω—è –Ω–µ—Ç —á–µ—Ç–∫–∏—Ö –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–π.`
    ];
    return speeches[Math.floor(Math.random() * speeches.length)];
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–ª–∏ –±–æ—Ç—É
  setBotRole(botId, role) {
    const bot = this.bots.get(botId);
    if (bot) {
      bot.role = role;
    }
  }

  // –£–±–∏–π—Å—Ç–≤–æ –±–æ—Ç–∞
  killBot(botId) {
    const bot = this.bots.get(botId);
    if (bot) {
      bot.alive = false;
    }
  }

  // –í–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ –±–æ—Ç–∞ (–¥–ª—è –¥–æ–∫—Ç–æ—Ä–∞)
  reviveBot(botId) {
    const bot = this.bots.get(botId);
    if (bot) {
      bot.alive = true;
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ fallback –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  generateSmartFallback(bot, context, type) {
    const alivePlayers = context.players?.filter(p => p.alive && p.name !== bot.name) || [];
    const aliveNames = alivePlayers.map(p => p.name);
    
    switch (type) {
      case 'greeting':
        const greetings = [
          `–ü—Ä–∏–≤—ñ—Ç! –Ø ${bot.name}, –≥–æ—Ç–æ–≤–∏–π –¥–æ –≥—Ä–∏!`,
          `–í—Å—ñ–º –ø—Ä–∏–≤—ñ—Ç! ${bot.name} —Ç—É—Ç.`,
          `–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –ú–µ–Ω–µ –∑–≤–∞—Ç–∏ ${bot.name}.`,
          `–ü—Ä–∏–≤—ñ—Ç, –≥—Ä–∞–≤—Ü—ñ! ${bot.name} –Ω–∞ –∑–≤'—è–∑–∫—É.`,
          `–í—ñ—Ç–∞—é –≤—Å—ñ—Ö! –Ø ${bot.name}.`
        ];
        return greetings[Math.floor(Math.random() * greetings.length)];
        
      case 'speech':
        const speeches = [
          `–Ø ${bot.name}. –ü–æ—Ç—Ä—ñ–±–Ω–æ –±—É—Ç–∏ —É–≤–∞–∂–Ω–∏–º –¥–æ –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –≥—Ä–∞–≤—Ü—ñ–≤.`,
          `${bot.name} –∫–∞–∂–µ: –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—î–º–æ —Å–∏—Ç—É–∞—Ü—ñ—é.`,
          `–Ø–∫ ${bot.name}, —è –¥—É–º–∞—é, —â–æ –≤–∞–∂–ª–∏–≤–æ —Å–ª—É—Ö–∞—Ç–∏ –≤—Å—ñ—Ö.`,
          `${bot.name} —Ç—É—Ç. –ü–æ–∫–∏ —â–æ —É –º–µ–Ω–µ –Ω–µ–º–∞—î —á—ñ—Ç–∫–∏—Ö –ø—ñ–¥–æ–∑—Ä.`,
          `–Ø ${bot.name}. –í–∞—Ä—Ç–æ –∑–≤–µ—Ä–Ω—É—Ç–∏ —É–≤–∞–≥—É –Ω–∞ –¥–µ—Ç–∞–ª—ñ.`
        ];
        return speeches[Math.floor(Math.random() * speeches.length)];
        
      case 'vote':
        if (aliveNames.length > 0) {
          // –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä: –∏–∑–±–µ–≥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è –∏–ª–∏ –∑–∞ —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ –ø–æ–ª—É—á–∏–ª –º–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤
          const randomTarget = aliveNames[Math.floor(Math.random() * aliveNames.length)];
          return randomTarget;
        }
        return null;
        
      case 'night_action':
        if (aliveNames.length > 0) {
          return aliveNames[Math.floor(Math.random() * aliveNames.length)];
        }
        return null;
        
      default:
        return `–Ø ${bot.name}.`;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
  getAIProviderStats() {
    return this.aiProvider.getProviderStats();
  }

  // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
  resetAIProviderErrors() {
    this.aiProvider.providers.forEach(provider => {
      provider.errorCount = 0;
      provider.enabled = true;
    });
    console.log('[AI] –°–±—Ä–æ—à–µ–Ω—ã —Å—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤');
  }

  // –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  setAIProviderStatus(providerName, enabled) {
    this.aiProvider.setProviderStatus(providerName, enabled);
  }
}

module.exports = { BotManager }; 